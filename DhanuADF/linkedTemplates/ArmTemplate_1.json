{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DhanuADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LogPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "ALTER PROCEDURE [dbo].[USP_LOGTEST] (\n    @ADF_NAME VARCHAR(50),\n    @PIPE_NAME NVARCHAR(100),\n    @TRIGGER_ID NVARCHAR,\n    @RUN_ID VARCHAR(50),\n    @TRIGGERTIME DATETIME )\n    AS\n    BEGIN\n    INSERT INTO LOGTEST VALUES(@ADF_NAME,@PIPE_NAME,@TRIGGER_ID,@RUN_ID,@TRIGGERTIME)\n    END",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"ADF_NAME": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPE_NAME": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RUN_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TRIGGER_ID": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TRIGGERTIME": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "OnPremDhanuSql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Souce_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremDhanuSql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Src_dbjoins_eshop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremDhanuSqlDbjoins",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SOURCE",
						"type": "varchar"
					},
					{
						"name": "SOURCE_TABLE",
						"type": "varchar"
					},
					{
						"name": "DEST_TABLE",
						"type": "varchar"
					},
					{
						"name": "COLUMNS",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_COLUMN",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_VALUE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENABLED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOAD_FLAG",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CFG"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TablesList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremDhanuSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cfg_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremDhanuSqlDbjoins",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SOURCE",
						"type": "varchar"
					},
					{
						"name": "SOURCE_TABLE",
						"type": "varchar"
					},
					{
						"name": "DEST_TABLE",
						"type": "varchar"
					},
					{
						"name": "COLUMNS",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_COLUMN",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_VALUE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENABLED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOAD_FLAG",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CFG"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbjoins_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremDhanuSqlDbjoins",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "nchar"
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dept_id",
						"type": "nchar"
					},
					{
						"name": "manager_id",
						"type": "nchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/des_emp_BadRows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Prop_0",
						"type": "nvarchar"
					},
					{
						"name": "Prop_1",
						"type": "nvarchar"
					},
					{
						"name": "Prop_2",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp_badrows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/des_emp_errorRows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Prop_0",
						"type": "nvarchar"
					},
					{
						"name": "Prop_1",
						"type": "nvarchar"
					},
					{
						"name": "Prop_2",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp_error"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log_PipelineErrors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "log",
								"type": "DatasetReference"
							},
							"name": "LogFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Des_logFile",
								"type": "DatasetReference"
							},
							"name": "DesLogFile"
						}
					],
					"transformations": [
						{
							"name": "AddColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADF_Name as string,",
						"     PipeLineName as string,",
						"     Status as string,",
						"     RunId as string,",
						"     TriggerName as string,",
						"     Log_File_Name as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LogFile",
						"LogFile derive(ADF_Name = $ADF_Name,",
						"          PipeLineName = $PipeLineName,",
						"          Status = $Status,",
						"          RunId = $RunId,",
						"          TriggerName = $TriggerName) ~> AddColumns",
						"AddColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($Log_File_Name)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ADF_name = ADF_Name,",
						"          PipeLineName,",
						"          Status,",
						"          RunId,",
						"          TriggerName",
						"     ),",
						"     partitionBy('hash', 1)) ~> DesLogFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log_PipelineErrors_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "log",
								"type": "DatasetReference"
							},
							"name": "LogFile"
						},
						{
							"dataset": {
								"referenceName": "SourceForUnion",
								"type": "DatasetReference"
							},
							"name": "ExistingFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Des_logFile",
								"type": "DatasetReference"
							},
							"name": "DesLogFile"
						}
					],
					"transformations": [
						{
							"name": "AddColumns"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ADF_Name as string,",
						"     PipeLineName as string,",
						"     Status as string,",
						"     RunId as string,",
						"     TriggerName as string,",
						"     Log_File_Name as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LogFile",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[($Log_File_Name)]) ~> ExistingFile",
						"LogFile derive(ADF_Name = $ADF_Name,",
						"          PipeLineName = $PipeLineName,",
						"          Status = $Status,",
						"          RunId = $RunId,",
						"          TriggerName = $TriggerName) ~> AddColumns",
						"AddColumns, ExistingFile union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($Log_File_Name)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ADF_name = ADF_Name,",
						"          PipeLineName,",
						"          Status,",
						"          RunId,",
						"          TriggerName",
						"     ),",
						"     partitionBy('hash', 1)) ~> DesLogFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RemoveDuplicates')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employe",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "des_dbjoinsEmp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          salary as string,",
						"          dept_id as string,",
						"          manager_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(emp_id),",
						"     each(match(name!='emp_id'), $$ = first($$))) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string",
						"     ),",
						"     partitionFileNames:['newEmploye.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSql_CFG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SOURCE",
						"type": "varchar"
					},
					{
						"name": "SOURCE_TABLE",
						"type": "varchar"
					},
					{
						"name": "DEST_TABLE",
						"type": "varchar"
					},
					{
						"name": "COLUMNS",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_COLUMN",
						"type": "varchar"
					},
					{
						"name": "WATERMARK_VALUE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENABLED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOAD_FLAG",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CFG"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Des_Eshop_ASql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log_PipelineErrors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set File Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Log_File_Name",
							"value": {
								"value": "@concat(formatDateTime(utcnow(),'yyyy-MM-dd'),'_Log.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckIfFileExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceForUnion",
								"type": "DatasetReference",
								"parameters": {
									"sou_File_name": {
										"value": "@variables('Log_File_Name')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckIfFileExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckIfFileExists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Log_PipelineErrors",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Log_PipelineErrors",
											"type": "DataFlowReference",
											"parameters": {
												"ADF_Name": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipeLineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('Done')}'",
													"type": "Expression"
												},
												"RunId": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"Log_File_Name": {
													"value": "'@{variables('Log_File_Name')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"LogFile": {},
												"DesLogFile": {
													"des_file_name": {
														"value": "@variables('Log_File_Name')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Log_PipelineErrors_Append",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Log_PipelineErrors_Append",
											"type": "DataFlowReference",
											"parameters": {
												"ADF_Name": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipeLineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{string('Done')}'",
													"type": "Expression"
												},
												"RunId": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"Log_File_Name": {
													"value": "'@{variables('Log_File_Name')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"LogFile": {},
												"ExistingFile": {
													"sou_File_name": {
														"value": "@variables('Log_File_Name')",
														"type": "Expression"
													}
												},
												"DesLogFile": {
													"des_file_name": {
														"value": "@variables('Log_File_Name')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Log_File_Name": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Log_PipelineErrors')]",
				"[concat(variables('factoryId'), '/dataflows/Log_PipelineErrors_Append')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_empFiletocsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dbjoins_emptable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dbjoins_emp",
								"type": "DatasetReference",
								"parameters": {
									"Table_Name": {
										"value": "@pipeline().parameters.TaableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Des_Movies",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.TaableName,'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaableName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dbjoins_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPrem_to_Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getListOfFiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from INFORMATION_SCHEMA.tables where TABLE_TYPE = 'BASE TABLE' ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TablesList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getListOfFiles",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getListOfFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ForEachCopy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Souce_Movies",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Des_Movies",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TablesList')]",
				"[concat(variables('factoryId'), '/datasets/Souce_Movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RemoveDuplicates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RemoveDuplicates",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RemoveDuplicates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {
										"Table_Name": "Employe"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Employe"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RemoveDuplicates')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HandleErrorRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emp_error",
								"type": "DatasetReference"
							},
							"name": "errorrows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "des_emp_errorRows",
								"type": "DatasetReference"
							},
							"name": "GoodRows"
						},
						{
							"dataset": {
								"referenceName": "des_emp_BadRows",
								"type": "DatasetReference"
							},
							"name": "badRows"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          join_date as date 'yyyy-MM-dd'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> errorrows",
						"errorrows split(isNull(join_date),",
						"     disjoint: false) ~> split1@(BadRows, GoodRows)",
						"split1@BadRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Prop_0 as string,",
						"          Prop_1 as string,",
						"          Prop_2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> GoodRows",
						"split1@GoodRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Prop_0 as string,",
						"          Prop_1 as string,",
						"          Prop_2 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> badRows"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/des_emp_errorRows')]",
				"[concat(variables('factoryId'), '/datasets/des_emp_BadRows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incre_OnpremToBlob_RecordMaxDate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Src_StageEshop_Blob",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSql_CFG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SOURCE_TABLE as string,",
						"     WATERMARK_FIELD as string",
						"}",
						"source(output(",
						"          customer_Id as string,",
						"          DOB as string,",
						"          Gender as string,",
						"          city_code as string,",
						"          Customer_Name as string,",
						"          Created_Modified_Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 aggregate(Max_Created_Modified_Date = iif($SOURCE_TABLE == 'Customer.csv', \r",
						"    max(toTimestamp(toString(byName($WATERMARK_FIELD)),'dd-MM-yyyy HH:mm')), \r",
						"    max(toTimestamp(toString(byName($WATERMARK_FIELD)),'dd-MM-yyyy HH:mm')))) ~> aggregate1",
						"derivedColumn1 alterRow(updateIf(isNull(Max_Created_Modified_Date)==false())) ~> alterRow1",
						"aggregate1 derive(DEST_TABLE = $SOURCE_TABLE) ~> derivedColumn1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SOURCE as string,",
						"          SOURCE_TABLE as string,",
						"          DEST_TABLE as string,",
						"          COLUMNS as string,",
						"          WATERMARK_COLUMN as string,",
						"          WATERMARK_VALUE as timestamp,",
						"          ENABLED as integer,",
						"          LOAD_FLAG as string,",
						"          STATUS as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['DEST_TABLE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSql_CFG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobToAzureSQLshop')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Src_Eshop_Blob",
								"type": "DatasetReference"
							},
							"name": "srcEshop"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Des_Eshop_ASql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          customer_Id as integer,",
						"          DOB as date,",
						"          Gender as string,",
						"          city_code as string,",
						"          Customer_Name as string,",
						"          Created_Modified_Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcEshop",
						"srcEshop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Des_Eshop_ASql')]"
			]
		}
	]
}